import SwiftUI

struct ConfettiView: View {
    @State private var confetti: [Confetti] = []

    var body: some View {
        ZStack {
            ForEach(confetti.indices, id: \.self) { index in
                confetti[index]
            }
        }
        .onAppear {
            startConfetti()
        }
    }

    private func startConfetti() {
        for _ in 0..<30 {
            confetti.append(Confetti())
        }
    }
}

struct Confetti: View {
    @State private var offset: CGSize = .zero
    @State private var rotation: Double = 0
    @State private var opacity: Double = 1

    var body: some View {
        Circle()
            .foregroundColor(.random)
            .frame(width: 10, height: 10)
            .offset(offset)
            .rotationEffect(.degrees(rotation))
            .opacity(opacity)
            .onAppear {
                animate()
            }
    }

    private func animate() {
        withAnimation(Animation.linear(duration: 2).repeatForever()) {
            offset = CGSize(width: Int.random(in: -300...300), height: Int.random(in: -800...800))
            rotation = Double.random(in: 0...360)
            opacity = 0
        }
    }
}

extension Color {
    static var random: Color {
        return Color(
            red: .random(in: 0...1),
            green: .random(in: 0...1),
            blue: .random(in: 0...1)
        )
    }
}
