<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Random Term Picker</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap">
    <style>
        body {
            text-align: center;
            margin: 0;
            padding: 0;
            font-family: 'Roboto', sans-serif;
            background-color: transparent; /* Set entire body background to transparent */
        }
        #container {
            background-color: transparent; /* Set container background to transparent */
            padding: 10px 20px 20px 20px; /* Adjusted padding to reduce top space */
            display: inline-block;
        }
        #randomTerm {
            font-size: 40px; /* Increased font size for terms */
            font-weight: bold;
            margin-bottom: 20px;
            color: #fff; /* White text for the term */
            min-height: 50px; /* Increased height to accommodate larger font size */
            opacity: 1;
            visibility: hidden; /* Hide text until button is clicked */
        }
        button {
            background-color: #F9CB40;
            color: #000; /* Set button text color to black */
            font-weight: bold; /* Make button text bold */
            border: 2px solid #19297C; /* Set button border color */
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }
        button:hover {
            background-color: #f1b12f;
        }
    </style>
</head>
<body>

<div id="container">
    <p id="randomTerm"></p>
    <button onclick="getRandomTerm()">Generate Theme</button>
</div>

<script>
async function fetchTerms() {
    const sheetId = '1KyBAn6YqlJGOtBXx4J32MjP6teYCw-0PDOW9PYusCAo';
    const response = await fetch(`https://docs.google.com/spreadsheets/d/${sheetId}/pub?output=csv`);
    const data = await response.text();
    const rows = data.split('\n').map(row => row.split(','));
    const termColumnIndex = rows[0].indexOf('term');

    if (termColumnIndex !== -1) {
        return rows.slice(1).map(row => row[termColumnIndex].trim().toUpperCase());
    } else {
        console.error('Column "term" not found in the sheet.');
        return [];
    }
}

async function getRandomTerm() {
    const terms = await fetchTerms();
    const termElement = document.getElementById('randomTerm');
    termElement.style.visibility = 'visible'; /* Show text when button is clicked */

    if (terms.length > 0) {
        let iteration = 0;
        const maxIterations = 20; // Number of terms to display before settling
        const interval = 100; // Increased time in milliseconds between term updates
        
        termElement.style.opacity = 1;
        const intervalId = setInterval(() => {
            if (iteration < maxIterations) {
                termElement.innerText = terms[Math.floor(Math.random() * terms.length)];
                iteration++;
            } else {
                clearInterval(intervalId);
                // Set final random term after scrolling through
                termElement.innerText = terms[Math.floor(Math.random() * terms.length)];
                termElement.style.opacity = 1;
            }
        }, interval);
        
        // Ensure that the final term is shown for a short period before the animation ends
        setTimeout(() => {
            termElement.style.opacity = 1; // Ensure term is fully visible
        }, maxIterations * interval);
    } else {
        document.getElementById('randomTerm').innerText = 'No terms available';
    }
}
</script>

</body>
</html>
