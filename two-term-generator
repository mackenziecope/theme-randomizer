<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Random Term Picker</title>
    <style>
        body {
            text-align: center;
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: transparent; /* Set background color to transparent */
        }

        #randomTerms {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 40px; /* Add space between terms and button */
        }

        button {
            background-color: #b89023;
            color: #fff;
            border: 2px white; /* Change border color to white */
            border-radius: 5px; /* Add border radius */
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }
    </style>
</head>
<body>

<div id="randomTerms"></div>

<button onclick="getRandomTerms()">Generate Themes</button>

<script>
async function fetchTerms() {
    try {
        const sheetId = 'YOUR_GOOGLE_SHEET_ID'; // Replace with your Google Sheet ID
        const response = await fetch(`https://docs.google.com/spreadsheets/d/${sheetId}/pub?output=csv`);
        const data = await response.text();

        // Split CSV rows into an array
        const rows = data.split('\n').map(row => row.split(','));

        if (rows.length > 1) {
            const headerRow = rows[0].map(column => column.trim());
            const termColumnIndex = headerRow.indexOf('term');
            const categoryColumnIndex = headerRow.indexOf('category');

            if (termColumnIndex !== -1 && categoryColumnIndex !== -1) {
                const terms = rows.slice(1).map(row => ({ term: row[termColumnIndex].toUpperCase(), category: row[categoryColumnIndex] }));
                return terms;
            } else {
                console.error('Columns "term" or "category" not found in the sheet.');
                return [];
            }
        } else {
            console.error('No data found in the sheet.');
            return [];
        }
    } catch (error) {
        console.error('Error fetching terms:', error);
        return [];
    }
}

async function getRandomTerms() {
    const terms = await fetchTerms();

    // Check if the array is not empty and has at least two terms
    if (terms.length > 1) {
        // Filter terms based on unique categories
        const uniqueCategories = [...new Set(terms.map(term => term.category))];
        const filteredTerms = terms.filter(term => uniqueCategories.includes(term.category));

        // Generate two random indices
        const randomIndex1 = Math.floor(Math.random() * filteredTerms.length);
        let randomIndex2 = Math.floor(Math.random() * filteredTerms.length);

        // Ensure the second index is different from the first
        while (randomIndex2 === randomIndex1) {
            randomIndex2 = Math.floor(Math.random() * filteredTerms.length);
        }

        // Get the terms at the random indices
        const randomTerm1 = filteredTerms[randomIndex1].term;
        const randomTerm2 = filteredTerms[randomIndex2].term;

        // Display the random terms with 20px space between them
        document.getElementById('randomTerms').innerHTML = `${randomTerm1}<br><br>${randomTerm2}`;
    } else {
        // Display a message if the array is empty or has less than two terms
        document.getElementById('randomTerms').innerText = 'Not enough themes available';
    }
}
</script>

</body>
</html>
